package mapreduce;

import java.io.IOException;
import java.util.*;

import org.apache.hadoop.fs.Path;
import org.apache.hadoop.conf.*;
import org.apache.hadoop.io.*;
import org.apache.hadoop.mapred.*;
import org.apache.hadoop.mapreduce.server.jobtracker.TaskTracker;
import org.apache.hadoop.util.*;

public class Status
{
	public void Monitor(JobClient client, RunningJob runningJob) throws Exception
	{
		// org.apache.hadoop.mapred.TaskTracker taskTracker = new org.apache.hadoop.mapred.TaskTracker()
      // Probe for stragglers while the job is running
      while (!runningJob.isComplete()){
    	  // Wait for a time before continuing
    	  Thread.sleep(1000);
    	  
    	  // Retrieve the latest task progress
          JobStatus jobStatus = runningJob.getJobStatus();
          ArrayList<TaskReport> allTaskReports = RetrieveAllTaskReports(client, jobStatus.getJobID());         
          ArrayList<TaskReport> stragglers = FindStragglers(allTaskReports);
                             
          
          System.out.println("Number of stragglers found:" + stragglers.size());
          System.console().writer().println("Number of stragglers found:" + stragglers.size());

          
          // TODO: test if these are CPU/RAM bound
      }  
	}

  // Retrieves amount of time a task has run, in milliseconds
  private static long TimeElapsedForTask(TaskReport taskReport) {
  	// If the task has not completed yet, its finish time may be zero
  	if(taskReport.getFinishTime() == 0) {
  		Date now = new Date();
  		return now.getTime() - taskReport.getStartTime();
  	}
  	else {
  		return taskReport.getFinishTime() - taskReport.getStartTime();
  	}
  }
  
  private static float MeanRunTime(ArrayList<TaskReport> taskReports)
  {
  	float totalRuntime = 0.0f;
  	for (TaskReport taskReport : taskReports)
  	{
  		totalRuntime += TimeElapsedForTask(taskReport);
    }
  	
  	return totalRuntime / taskReports.size();
  }
  
  private static ArrayList<TaskReport> FindStragglers(ArrayList<TaskReport> taskReports) {
  	// Get the mean runtime    	
  	float meanRuntime = MeanRunTime(taskReports);
  	
  	// Find all tasks that are straggling
  	ArrayList<TaskReport> stragglingTasks = new ArrayList<TaskReport>();
		for (TaskReport taskReport : taskReports) {
			// If the task is not complete AND it's runtime is more than the mean runtime, then it is a straggler
			if (taskReport.getProgress() != 1 && TimeElapsedForTask(taskReport) > meanRuntime) {
				stragglingTasks.add(taskReport);
			}
		}
  	
  	return stragglingTasks;
  }
  
  // Retrieve all tasks
  private ArrayList<TaskReport> RetrieveAllTaskReports(JobClient client, JobID jobId) throws IOException
  {
      ArrayList<TaskReport> allTaskReports = new ArrayList<TaskReport>();
      
      for (TaskReport report : client.getMapTaskReports(jobId))
	  {
    	  allTaskReports.add(report);
	  }
      
      for (TaskReport report : client.getReduceTaskReports(jobId))
	  {
	  		allTaskReports.add(report);
	  }
      
      return allTaskReports;
  }
  
  
  
  
  
	
	
  
  public void Monitor2(JobClient client, RunningJob runningJob) throws Exception
  {	  
    // Probe for stragglers while the job is running
    while (!runningJob.isComplete())
    {
    	// Wait for a time before continuing
  	  	Thread.sleep(5000);
  	  
  	  	// Retrieve the latest task progress
        JobStatus jobStatus = runningJob.getJobStatus();        
        
        ArrayList<TaskReport> allTaskReports = RetrieveAllTaskReports(client, jobStatus.getJobID());        
        ArrayList<TaskReport> stragglers = FindStragglers(allTaskReports);
        
        for (TaskReport report : stragglers)
        {
        	// Check with Hypervisor if CPU/RAM resources are fully utilized
        	// If yes, give more CPU/RAM, otherwise ignore
        }      
    }
  }
  
  
  
  
  
  
  
  
  
}
