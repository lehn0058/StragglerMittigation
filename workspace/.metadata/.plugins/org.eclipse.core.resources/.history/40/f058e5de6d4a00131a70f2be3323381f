package mapreduce;

import java.io.Console;
import java.io.IOException;
import java.util.*;

import org.apache.hadoop.fs.Path;
import org.apache.hadoop.conf.*;
import org.apache.hadoop.io.*;
import org.apache.hadoop.mapred.*;
import org.apache.hadoop.mapreduce.server.jobtracker.TaskTracker;
import org.apache.hadoop.util.*;

import sun.reflect.generics.reflectiveObjects.NotImplementedException;

public class Status
{
	private JobClient _client;
	private RunningJob _runningJob;
	private JobConf _conf;
	//private JobTracker _jobTracker;
	
	public Status(JobClient client, RunningJob runningJob, JobConf conf)
	{
		_client = client;
		_runningJob = runningJob;
		_conf = conf;
	}
	
	public void Monitor() throws Exception
	{
		// Start the job tracker
		//_jobTracker = JobTracker.startTracker(_conf);
		
		//System.out.println("Job Tracker Map Task reports: " + _jobTracker.getMapTaskReports(_runningJob.getID()));
		//System.out.println("Job Tracker Reduce Task reports: " + _jobTracker.getReduceTaskReports(_runningJob.getID()));
		
		// org.apache.hadoop.mapred.TaskTracker taskTracker = new org.apache.hadoop.mapred.TaskTracker()
		// Probe for stragglers while the job is running
		while (!_runningJob.isComplete())
		{
			// Wait for a time before continuing
			Thread.sleep(5000);

			// Retrieve the latest task progress
			JobStatus jobStatus = _runningJob.getJobStatus();
						
			ArrayList<TaskReport> allTaskReports = RetrieveAllTaskReports(jobStatus.getJobID());
			
			// Determine which tasks are straggling
			ArrayList<TaskReport> stragglers = FindStragglers(allTaskReports);

			System.out.println("Straggling tasks found: " + stragglers.size());
			
//			// Find task reports per machine
//			ArrayList<MachineTaskReport> machineTaskReports = FindMachineTaskReport(stragglers);
//			
//			// Check each straggler to see if they are CPU/RAM bound
//			for (MachineTaskReport machineTaskReport : machineTaskReports) 
//			{
//				if (IsCPUBound(machineTaskReport))	AddCPUIfAvailable(machineTaskReport);
//				if (IsRAMBound(machineTaskReport))	AddRAMIfAvailable(machineTaskReport);
//			}
		}
	}
	
//	private ArrayList<MachineTaskReport> FindMachineTaskReport(ArrayList<TaskReport> taskReports)
//	{
//		Collection<TaskTrackerStatus> taskTrackerStatuses = _jobTracker.activeTaskTrackers();
//		ArrayList<MachineTaskReport> machineTaskReports = new ArrayList<MachineTaskReport>();
//		
//		// Find the matching taskID in the task reports and task tracker
//		for (TaskReport taskReport : taskReports)
//		{
//			// For each task tracker (1 per machine)
//			for (TaskTrackerStatus taskTrackerStatus : taskTrackerStatuses)
//			{				
//			     String hostName = taskTrackerStatus.getHost();
//			     System.out.println("Searching task tracker with host name: " + hostName);
//			     
//			     // Get the status of all tasks for the current host
//			     List<TaskStatus> taskStatuses = taskTrackerStatus.getTaskReports();
//			     for (TaskStatus taskStatus : taskStatuses)
//			     {
//			          TaskAttemptID taskAttemptId = taskStatus.getTaskID();
//			          			          
//			          if (taskReport.getTaskID().equals(taskAttemptId.getTaskID()))
//			          {
//			        	  System.out.println("Found taskID match!");
//			        	  
//			        	  // TODO: Group these by host name, so we don't have to de-dupe which machines are getting resources.
//			        	  // Could also be used to help calculate priority...
//			        	  machineTaskReports.add(new MachineTaskReport(hostName, taskReport));
//			          }
//			     }
//			}
//		}
//		
//		System.out.println("MachineTaskReports size: " + machineTaskReports.size());
//		
//		return machineTaskReports;
//	}

	// Retrieves amount of time a task has run, in milliseconds
	private static long TimeElapsedForTask(TaskReport taskReport)
	{		
		Date now = new Date();
		
//		System.out.println("Current time: " + now.getTime());
//		System.out.println("Task report start time: " + taskReport.getStartTime());
		System.out.println("Time elapsed: " + (now.getTime() - taskReport.getStartTime()));
		
		// If the task has not completed yet, its finish time may be zero
		if (taskReport.getFinishTime() == 0)
		{
			//Date now = new Date();
			return now.getTime() - taskReport.getStartTime();
		}
		else
		{
			long timeElapsedForTask = taskReport.getFinishTime() - taskReport.getStartTime();		
			return timeElapsedForTask;
		}
	}

	private static float MeanRunTime(ArrayList<TaskReport> taskReports)
	{
		float totalRuntime = 0.0f;
		for (TaskReport taskReport : taskReports)
		{
			if (taskReport.getStartTime() == 0)
			{
				
				continue;
			}
			
			totalRuntime += TimeElapsedForTask(taskReport);
		}

		return totalRuntime / taskReports.size();
	}

	private static ArrayList<TaskReport> FindStragglers(ArrayList<TaskReport> taskReports)
	{
		// Filter out tasks that have not started yet
		ArrayList<TaskReport> startedTasks = new ArrayList<TaskReport>();
		for (TaskReport taskReport : taskReports)
		{
			if (taskReport.getStartTime() != 0)
			{
				System.out.println("Start time: " + taskReport.getStartTime());
				
				startedTasks.add(taskReport);
			}
		}
		
		// Get the mean runtime
		float meanRuntime = MeanRunTime(taskReports);

		System.out.println("Mean runtime: " + meanRuntime);
		
		// Find all tasks that are straggling
		ArrayList<TaskReport> stragglingTasks = new ArrayList<TaskReport>();
		for (TaskReport taskReport : taskReports)
		{
			// If the task is not complete AND it's runtime is more than the
			// mean runtime, then it is a straggler			
			if (taskReport.getProgress() != 1 && TimeElapsedForTask(taskReport) > meanRuntime)
			{
				stragglingTasks.add(taskReport);
			}
		}

		return stragglingTasks;
	}

	// Retrieve all tasks
	private ArrayList<TaskReport> RetrieveAllTaskReports(JobID jobId) throws IOException
	{
		System.out.println("JobId: " + jobId);
		
		ArrayList<TaskReport> allTaskReports = new ArrayList<TaskReport>();
		
		System.out.println("Map task count: " + _client.getMapTaskReports(jobId).length);
		System.out.println("Reduce task count: " + _client.getReduceTaskReports(jobId).length);
		
		for (TaskReport report : _client.getMapTaskReports(jobId))
		{
			allTaskReports.add(report);
		}

		for (TaskReport report : _client.getReduceTaskReports(jobId))
		{
			allTaskReports.add(report);
		}

		return allTaskReports;
	}

	// Checks to see if a task is currently CPU bound
	private boolean IsCPUBound(MachineTaskReport machineTaskReport)
	{
		throw new NotImplementedException();
	}

	// Adds a CPU to a task if one is available in the resource pool
	private void AddCPUIfAvailable(MachineTaskReport machineTaskReport)
	{
		throw new NotImplementedException();
	}

	// Checks to see if a task is currently RAM bound
	private boolean IsRAMBound(MachineTaskReport machineTaskReport)
	{
		throw new NotImplementedException();
	}

	// Adds 1 GB of RAM to a task if it is available in the resource pool
	private void AddRAMIfAvailable(MachineTaskReport machineTaskReport)
	{
		throw new NotImplementedException();
	}
}









